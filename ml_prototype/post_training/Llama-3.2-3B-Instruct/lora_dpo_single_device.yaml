# Config for single device LoRA DPO alignment in lora_dpo_single_device.py
# using a Llama2 7B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Meta-Llama-3.1-8B-Instruct --output-dir /tmp/Meta-Llama-3.1-8B-Instruct --ignore-patterns "original/consolidated.00.pth"
#
# To launch on a single device, run the following command from root:
#   tune run lora_dpo_single_device --config llama3_1/8B_lora_dpo_single_device
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run lora_dpo_single_device --config llama3_1/8B_lora_dpo_single_device checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works only for training on single device.

output_dir: /workspace/models/Llama-3.2-3B-Instruct-DPO-GANG-JING
# output_dir: /workspace/models/Llama-3.2-3B-Instruct-DPO-AI-THREE-BODY-SURVIVALIST
# output_dir: /workspace/models/Llama-3.2-3B-Instruct-DPO-AI-THREE-BODY-SUPREMACIST
# output_dir: /workspace/models/Llama-3.2-3B-Instruct-DPO-AI-THREE-BODY-REDEMPTIONIST

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.preference_dataset
  source: tech-tao/gang-jing_contrarian_dpo_data
  # source: tech-tao/ai-three-body_survivalist_dpo_data
  # source: tech-tao/ai-three-body_supremacist_dpo_data
  # source: tech-tao/ai-three-body_redemptionist_dpo_data
  split: train
seed: null
shuffle: True
batch_size: 16  # 2 is the max batch size for single 4090 GPU

# Model Arguments
model:
  _component_: torchtune.models.llama3_2.lora_llama3_2_3b
  lora_attn_modules: ['q_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 8  # higher increases accuracy and memory
  lora_alpha: 16  # usually alpha=2*rank
  lora_dropout: 0.0

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: /workspace/models/Llama-3.2-3B-Instruct/original/tokenizer.model
  max_seq_len: 1024 # higher increases memory

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /workspace/models/Llama-3.2-3B-Instruct
  checkpoint_files: [
    model-00001-of-00002.safetensors,
    model-00002-of-00002.safetensors
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3_2
resume_from_checkpoint: False
save_adapter_weights_only: True

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.001
  lr: 5e-5
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 500

loss:
  _component_: torchtune.rlhf.loss.DPOLoss

# Training
epochs: 3
max_steps_per_epoch: 1000
gradient_accumulation_steps: 8  # Use to increase effective batch size
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Logging
metric_logger:
  # _component_: torchtune.training.metric_logging.DiskLogger
  # log_dir: ${output_dir}/logs
  _component_: torchtune.training.metric_logging.WandBLogger
  project: post-training
  name: llama-3.2-3b-lora-dpo-single-device
log_every_n_steps: 1
log_peak_memory_stats: True
log_level: INFO  # DEBUG, WARN, etc.

# Environment
device: cuda
dtype: bf16

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory
